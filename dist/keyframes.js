(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var Keyframes = function () {
  function Keyframes(elem) {
    _classCallCheck(this, Keyframes);

    this.elem = elem;
  }

  _createClass(Keyframes, [{
    key: "isSupported",
    value: function isSupported() {
      return document.body.style.animationName !== undefined;
    }
  }, {
    key: "reset",
    value: function reset(callback) {
      this.elem.style.animationPlayState = 'running';
      this.elem.style.animation = 'none';

      if (callback) {
        setTimeout(callback, 0);
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      this.elem.style.animationPlayState = 'paused';
    }
  }, {
    key: "resume",
    value: function resume() {
      this.elem.style.animationPlayState = 'running';
    }
  }, {
    key: "play",
    value: function play(frameOptions, callback) {
      var _this = this;

      var animObjToStr = function animObjToStr(obj) {
        var newObj = Object.assign({}, {
          duration: '0s',
          timingFunction: 'ease',
          delay: '0s',
          iterationCount: 1,
          direction: 'normal',
          fillMode: 'forwards'
        }, obj);
        return [newObj.name, newObj.duration, newObj.timingFunction, newObj.delay, newObj.iterationCount, newObj.direction, newObj.fillMode].join(' ');
      };

      var animationcss = '';

      if (frameOptions.constructor === Array) {
        var frameOptionsStrings = [];

        for (var i = 0; i < frameOptions.length; i += 1) {
          frameOptionsStrings.push(typeof frameOptions[i] === 'string' ? frameOptions[i] : animObjToStr(frameOptions[i]));
        }

        animationcss = frameOptionsStrings.join(', ');
      } else if (typeof frameOptions === 'string') {
        animationcss = frameOptions;
      } else {
        animationcss = animObjToStr(frameOptions);
      }

      var addEvent = function addEvent(type, eventCallback) {
        var listenerName = "".concat(type, "Listener");

        _this.elem.removeEventListener(type, _this[listenerName]);

        _this[listenerName] = eventCallback;

        _this.elem.addEventListener(type, _this[listenerName]);
      };

      this.elem.style.animationPlayState = 'running';
      this.elem.style.animation = animationcss;
      this.frameOptions = frameOptions;
      addEvent('animationiteration', callback || frameOptions.complete);
      addEvent('animationend', callback || frameOptions.complete);
    }
  }], [{
    key: "createKeyframeTag",
    value: function createKeyframeTag(id, css) {
      var elem = document.createElement('style');
      elem.innerHTML = css;
      elem.setAttribute('class', 'keyframe-style');
      elem.setAttribute('id', id);
      elem.setAttribute('type', 'text/css');
      document.getElementsByTagName('head')[0].appendChild(elem);
    }
  }, {
    key: "generate",
    value: function generate(frameData) {
      var frameName = frameData.name || '';
      var css = "@keyframes ".concat(frameName, " {");

      for (var key in frameData) {
        if (key !== 'name' && key !== 'media' && key !== 'complete') {
          css += "".concat(key, " {");

          for (var property in frameData[key]) {
            css += "".concat(property, ":").concat(frameData[key][property], ";");
          }

          css += '}';
        }
      }

      if (frameData.media) {
        css = "@media ".concat(frameData.media, "{").concat(css, "}");
      }

      var frameStyle = document.getElementById(frameName);

      if (frameStyle) {
        frameStyle.innerHTML = css;
      } else {
        Keyframes.createKeyframeTag(frameName, css);
      }
    }
  }, {
    key: "define",
    value: function define(frameData) {
      if (frameData.length) {
        for (var i = 0; i < frameData.length; i += 1) {
          this.generate(frameData[i]);
        }
      } else {
        this.generate(frameData);
      }
    }
  }, {
    key: "plugin",
    value: function plugin(pluginFunc) {
      pluginFunc();
    }
  }]);

  return Keyframes;
}();

exports.default = Keyframes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImtleWZyYW1lcy5lczYuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIktleWZyYW1lcyIsImVsZW0iLCJpc1N1cHBvcnRlZCIsImRvY3VtZW50IiwiYm9keSIsInN0eWxlIiwiYW5pbWF0aW9uTmFtZSIsInVuZGVmaW5lZCIsInJlc2V0IiwiY2FsbGJhY2siLCJhbmltYXRpb25QbGF5U3RhdGUiLCJhbmltYXRpb24iLCJzZXRUaW1lb3V0IiwicGF1c2UiLCJyZXN1bWUiLCJwbGF5IiwiZnJhbWVPcHRpb25zIiwiX3RoaXMiLCJhbmltT2JqVG9TdHIiLCJvYmoiLCJuZXdPYmoiLCJhc3NpZ24iLCJkdXJhdGlvbiIsInRpbWluZ0Z1bmN0aW9uIiwiZGVsYXkiLCJpdGVyYXRpb25Db3VudCIsImRpcmVjdGlvbiIsImZpbGxNb2RlIiwibmFtZSIsImpvaW4iLCJhbmltYXRpb25jc3MiLCJjb25zdHJ1Y3RvciIsIkFycmF5IiwiZnJhbWVPcHRpb25zU3RyaW5ncyIsInB1c2giLCJhZGRFdmVudCIsInR5cGUiLCJldmVudENhbGxiYWNrIiwibGlzdGVuZXJOYW1lIiwiY29uY2F0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb21wbGV0ZSIsImNyZWF0ZUtleWZyYW1lVGFnIiwiaWQiLCJjc3MiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhcHBlbmRDaGlsZCIsImdlbmVyYXRlIiwiZnJhbWVEYXRhIiwiZnJhbWVOYW1lIiwicHJvcGVydHkiLCJtZWRpYSIsImZyYW1lU3R5bGUiLCJnZXRFbGVtZW50QnlJZCIsImRlZmluZSIsInBsdWdpbiIsInBsdWdpbkZ1bmMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTztBQURvQyxDQUE3QztBQUdBRCxRQUFRRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsU0FBU0MsZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNDLFdBQW5DLEVBQWdEO0FBQUUsTUFBSSxFQUFFRCxvQkFBb0JDLFdBQXRCLENBQUosRUFBd0M7QUFBRSxVQUFNLElBQUlDLFNBQUosQ0FBYyxtQ0FBZCxDQUFOO0FBQTJEO0FBQUU7O0FBRXpKLFNBQVNDLGlCQUFULENBQTJCQyxNQUEzQixFQUFtQ0MsS0FBbkMsRUFBMEM7QUFBRSxPQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUQsTUFBTUUsTUFBMUIsRUFBa0NELEdBQWxDLEVBQXVDO0FBQUUsUUFBSUUsYUFBYUgsTUFBTUMsQ0FBTixDQUFqQjtBQUEyQkUsZUFBV0MsVUFBWCxHQUF3QkQsV0FBV0MsVUFBWCxJQUF5QixLQUFqRDtBQUF3REQsZUFBV0UsWUFBWCxHQUEwQixJQUExQjtBQUFnQyxRQUFJLFdBQVdGLFVBQWYsRUFBMkJBLFdBQVdHLFFBQVgsR0FBc0IsSUFBdEI7QUFBNEJqQixXQUFPQyxjQUFQLENBQXNCUyxNQUF0QixFQUE4QkksV0FBV0ksR0FBekMsRUFBOENKLFVBQTlDO0FBQTREO0FBQUU7O0FBRTdULFNBQVNLLFlBQVQsQ0FBc0JaLFdBQXRCLEVBQW1DYSxVQUFuQyxFQUErQ0MsV0FBL0MsRUFBNEQ7QUFBRSxNQUFJRCxVQUFKLEVBQWdCWCxrQkFBa0JGLFlBQVllLFNBQTlCLEVBQXlDRixVQUF6QztBQUFz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RCxTQUFLLFFBREo7QUFFRGYsV0FBTyxTQUFTOEUsTUFBVCxDQUFnQk4sU0FBaEIsRUFBMkI7QUFDaEMsVUFBSUEsVUFBVTlELE1BQWQsRUFBc0I7QUFDcEIsYUFBSyxJQUFJRCxJQUFJLENBQWIsRUFBZ0JBLElBQUkrRCxVQUFVOUQsTUFBOUIsRUFBc0NELEtBQUssQ0FBM0MsRUFBOEM7QUFDNUMsZUFBSzhELFFBQUwsQ0FBY0MsVUFBVS9ELENBQVYsQ0FBZDtBQUNEO0FBQ0YsT0FKRCxNQUlPO0FBQ0wsYUFBSzhELFFBQUwsQ0FBY0MsU0FBZDtBQUNEO0FBQ0Y7QUFWQSxHQXhDQyxFQW1ERDtBQUNEekQsU0FBSyxRQURKO0FBRURmLFdBQU8sU0FBUytFLE1BQVQsQ0FBZ0JDLFVBQWhCLEVBQTRCO0FBQ2pDQTtBQUNEO0FBSkEsR0FuREMsQ0ExRUo7O0FBb0lBLFNBQU81RCxTQUFQO0FBQ0QsQ0E1SWUsRUFBaEI7O0FBOElBckIsUUFBUUUsT0FBUixHQUFrQm1CLFNBQWxCIiwiZmlsZSI6Ii9Vc2Vycy9qYWtlY2F0dHJhbGwvR2l0SHViL0tleWZyYW1lcy9kaXN0L2tleWZyYW1lcy5lczYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgS2V5ZnJhbWVzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXMoZWxlbSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBLZXlmcmFtZXMpO1xuXG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhLZXlmcmFtZXMsIFt7XG4gICAga2V5OiBcImlzU3VwcG9ydGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuc3R5bGUuYW5pbWF0aW9uTmFtZSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldChjYWxsYmFjaykge1xuICAgICAgdGhpcy5lbGVtLnN0eWxlLmFuaW1hdGlvblBsYXlTdGF0ZSA9ICdydW5uaW5nJztcbiAgICAgIHRoaXMuZWxlbS5zdHlsZS5hbmltYXRpb24gPSAnbm9uZSc7XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicGF1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmVsZW0uc3R5bGUuYW5pbWF0aW9uUGxheVN0YXRlID0gJ3BhdXNlZCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc3VtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgICB0aGlzLmVsZW0uc3R5bGUuYW5pbWF0aW9uUGxheVN0YXRlID0gJ3J1bm5pbmcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoZnJhbWVPcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGFuaW1PYmpUb1N0ciA9IGZ1bmN0aW9uIGFuaW1PYmpUb1N0cihvYmopIHtcbiAgICAgICAgdmFyIG5ld09iaiA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICBkdXJhdGlvbjogJzBzJyxcbiAgICAgICAgICB0aW1pbmdGdW5jdGlvbjogJ2Vhc2UnLFxuICAgICAgICAgIGRlbGF5OiAnMHMnLFxuICAgICAgICAgIGl0ZXJhdGlvbkNvdW50OiAxLFxuICAgICAgICAgIGRpcmVjdGlvbjogJ25vcm1hbCcsXG4gICAgICAgICAgZmlsbE1vZGU6ICdmb3J3YXJkcydcbiAgICAgICAgfSwgb2JqKTtcbiAgICAgICAgcmV0dXJuIFtuZXdPYmoubmFtZSwgbmV3T2JqLmR1cmF0aW9uLCBuZXdPYmoudGltaW5nRnVuY3Rpb24sIG5ld09iai5kZWxheSwgbmV3T2JqLml0ZXJhdGlvbkNvdW50LCBuZXdPYmouZGlyZWN0aW9uLCBuZXdPYmouZmlsbE1vZGVdLmpvaW4oJyAnKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBhbmltYXRpb25jc3MgPSAnJztcblxuICAgICAgaWYgKGZyYW1lT3B0aW9ucy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcbiAgICAgICAgdmFyIGZyYW1lT3B0aW9uc1N0cmluZ3MgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYW1lT3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGZyYW1lT3B0aW9uc1N0cmluZ3MucHVzaCh0eXBlb2YgZnJhbWVPcHRpb25zW2ldID09PSAnc3RyaW5nJyA/IGZyYW1lT3B0aW9uc1tpXSA6IGFuaW1PYmpUb1N0cihmcmFtZU9wdGlvbnNbaV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFuaW1hdGlvbmNzcyA9IGZyYW1lT3B0aW9uc1N0cmluZ3Muam9pbignLCAnKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZyYW1lT3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYW5pbWF0aW9uY3NzID0gZnJhbWVPcHRpb25zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5pbWF0aW9uY3NzID0gYW5pbU9ialRvU3RyKGZyYW1lT3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhZGRFdmVudCA9IGZ1bmN0aW9uIGFkZEV2ZW50KHR5cGUsIGV2ZW50Q2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyTmFtZSA9IFwiXCIuY29uY2F0KHR5cGUsIFwiTGlzdGVuZXJcIik7XG5cbiAgICAgICAgX3RoaXMuZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIF90aGlzW2xpc3RlbmVyTmFtZV0pO1xuXG4gICAgICAgIF90aGlzW2xpc3RlbmVyTmFtZV0gPSBldmVudENhbGxiYWNrO1xuXG4gICAgICAgIF90aGlzLmVsZW0uYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBfdGhpc1tsaXN0ZW5lck5hbWVdKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZWxlbS5zdHlsZS5hbmltYXRpb25QbGF5U3RhdGUgPSAncnVubmluZyc7XG4gICAgICB0aGlzLmVsZW0uc3R5bGUuYW5pbWF0aW9uID0gYW5pbWF0aW9uY3NzO1xuICAgICAgdGhpcy5mcmFtZU9wdGlvbnMgPSBmcmFtZU9wdGlvbnM7XG4gICAgICBhZGRFdmVudCgnYW5pbWF0aW9uaXRlcmF0aW9uJywgY2FsbGJhY2sgfHwgZnJhbWVPcHRpb25zLmNvbXBsZXRlKTtcbiAgICAgIGFkZEV2ZW50KCdhbmltYXRpb25lbmQnLCBjYWxsYmFjayB8fCBmcmFtZU9wdGlvbnMuY29tcGxldGUpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImNyZWF0ZUtleWZyYW1lVGFnXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUtleWZyYW1lVGFnKGlkLCBjc3MpIHtcbiAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIGVsZW0uaW5uZXJIVE1MID0gY3NzO1xuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2tleWZyYW1lLXN0eWxlJyk7XG4gICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICBlbGVtLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2VuZXJhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGUoZnJhbWVEYXRhKSB7XG4gICAgICB2YXIgZnJhbWVOYW1lID0gZnJhbWVEYXRhLm5hbWUgfHwgJyc7XG4gICAgICB2YXIgY3NzID0gXCJAa2V5ZnJhbWVzIFwiLmNvbmNhdChmcmFtZU5hbWUsIFwiIHtcIik7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBmcmFtZURhdGEpIHtcbiAgICAgICAgaWYgKGtleSAhPT0gJ25hbWUnICYmIGtleSAhPT0gJ21lZGlhJyAmJiBrZXkgIT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgICBjc3MgKz0gXCJcIi5jb25jYXQoa2V5LCBcIiB7XCIpO1xuXG4gICAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gZnJhbWVEYXRhW2tleV0pIHtcbiAgICAgICAgICAgIGNzcyArPSBcIlwiLmNvbmNhdChwcm9wZXJ0eSwgXCI6XCIpLmNvbmNhdChmcmFtZURhdGFba2V5XVtwcm9wZXJ0eV0sIFwiO1wiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjc3MgKz0gJ30nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmcmFtZURhdGEubWVkaWEpIHtcbiAgICAgICAgY3NzID0gXCJAbWVkaWEgXCIuY29uY2F0KGZyYW1lRGF0YS5tZWRpYSwgXCJ7XCIpLmNvbmNhdChjc3MsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZyYW1lU3R5bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmcmFtZU5hbWUpO1xuXG4gICAgICBpZiAoZnJhbWVTdHlsZSkge1xuICAgICAgICBmcmFtZVN0eWxlLmlubmVySFRNTCA9IGNzcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEtleWZyYW1lcy5jcmVhdGVLZXlmcmFtZVRhZyhmcmFtZU5hbWUsIGNzcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlZmluZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWZpbmUoZnJhbWVEYXRhKSB7XG4gICAgICBpZiAoZnJhbWVEYXRhLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYW1lRGF0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuZ2VuZXJhdGUoZnJhbWVEYXRhW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZShmcmFtZURhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbHVnaW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGx1Z2luKHBsdWdpbkZ1bmMpIHtcbiAgICAgIHBsdWdpbkZ1bmMoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gS2V5ZnJhbWVzO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBLZXlmcmFtZXM7XG4iXX0=
},{}]},{},[1]);
